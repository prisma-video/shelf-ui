type Movie {
  id: ID!
  title: String!
  original_title: String
  description: String
  trailer_url: String
  thumbnail_img: String
  pg_rating: String
  tags: [String]
  production_date: String
  release_date: String
  revenue: Int
  box_office: Int
  imbd_url: String
  imbd_score: Int
  rotten_tomatoes_url: String
  rotten_tomatoes_score: Int
  directors: [String]
  writers: [String]
  producers: [String]
  actors: [String]
  comments(content: ModelStringKeyConditionInput, filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Comment {
  id: ID!
  movieID: ID!
  movie: Movie
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelMovieConnection {
  items: [Movie]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelMovieFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  original_title: ModelStringInput
  description: ModelStringInput
  trailer_url: ModelStringInput
  thumbnail_img: ModelStringInput
  pg_rating: ModelStringInput
  tags: ModelStringInput
  production_date: ModelStringInput
  release_date: ModelStringInput
  revenue: ModelIntInput
  box_office: ModelIntInput
  imbd_url: ModelStringInput
  imbd_score: ModelIntInput
  rotten_tomatoes_url: ModelStringInput
  rotten_tomatoes_score: ModelIntInput
  directors: ModelStringInput
  writers: ModelStringInput
  producers: ModelStringInput
  actors: ModelStringInput
  and: [ModelMovieFilterInput]
  or: [ModelMovieFilterInput]
  not: ModelMovieFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getMovie(id: ID!): Movie
  listMovies(filter: ModelMovieFilterInput, limit: Int, nextToken: String): ModelMovieConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
}

input CreateMovieInput {
  id: ID
  title: String!
  original_title: String
  description: String
  trailer_url: String
  thumbnail_img: String
  pg_rating: String
  tags: [String]
  production_date: String
  release_date: String
  revenue: Int
  box_office: Int
  imbd_url: String
  imbd_score: Int
  rotten_tomatoes_url: String
  rotten_tomatoes_score: Int
  directors: [String]
  writers: [String]
  producers: [String]
  actors: [String]
}

input UpdateMovieInput {
  id: ID!
  title: String
  original_title: String
  description: String
  trailer_url: String
  thumbnail_img: String
  pg_rating: String
  tags: [String]
  production_date: String
  release_date: String
  revenue: Int
  box_office: Int
  imbd_url: String
  imbd_score: Int
  rotten_tomatoes_url: String
  rotten_tomatoes_score: Int
  directors: [String]
  writers: [String]
  producers: [String]
  actors: [String]
}

input DeleteMovieInput {
  id: ID!
}

type Mutation {
  createMovie(input: CreateMovieInput!, condition: ModelMovieConditionInput): Movie
  updateMovie(input: UpdateMovieInput!, condition: ModelMovieConditionInput): Movie
  deleteMovie(input: DeleteMovieInput!, condition: ModelMovieConditionInput): Movie
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment
}

input ModelMovieConditionInput {
  title: ModelStringInput
  original_title: ModelStringInput
  description: ModelStringInput
  trailer_url: ModelStringInput
  thumbnail_img: ModelStringInput
  pg_rating: ModelStringInput
  tags: ModelStringInput
  production_date: ModelStringInput
  release_date: ModelStringInput
  revenue: ModelIntInput
  box_office: ModelIntInput
  imbd_url: ModelStringInput
  imbd_score: ModelIntInput
  rotten_tomatoes_url: ModelStringInput
  rotten_tomatoes_score: ModelIntInput
  directors: ModelStringInput
  writers: ModelStringInput
  producers: ModelStringInput
  actors: ModelStringInput
  and: [ModelMovieConditionInput]
  or: [ModelMovieConditionInput]
  not: ModelMovieConditionInput
}

type Subscription {
  onCreateMovie: Movie @aws_subscribe(mutations: ["createMovie"])
  onUpdateMovie: Movie @aws_subscribe(mutations: ["updateMovie"])
  onDeleteMovie: Movie @aws_subscribe(mutations: ["deleteMovie"])
  onCreateComment: Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment: Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment: Comment @aws_subscribe(mutations: ["deleteComment"])
}

type ModelCommentConnection {
  items: [Comment]
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDInput
  movieID: ModelIDInput
  content: ModelStringInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input CreateCommentInput {
  id: ID
  movieID: ID!
  content: String!
}

input UpdateCommentInput {
  id: ID!
  movieID: ID
  content: String
}

input DeleteCommentInput {
  id: ID!
}

input ModelCommentConditionInput {
  movieID: ModelIDInput
  content: ModelStringInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
